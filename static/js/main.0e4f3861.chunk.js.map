{"version":3,"sources":["containers/chart.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Chart","props","d3Container","useRef","React","gdpData","setGdpData","useEffect","current","d3","then","response","data","dataset","h","datesMap","map","each","Date","maxDate","setMonth","getMonth","minDate","d","xScale","domain","range","w","yScale","svg","append","attr","xAxis","tickFormat","ticks","yAxis","tooltip","style","selectAll","enter","i","length","on","transition","duration","html","pageX","pageY","call","text","id","ref","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0e4f3861.chunk.js","sourcesContent":["import * as React from 'react'\nimport './chart.scss'\nimport * as d3 from 'd3'\nimport { useRef, useEffect } from 'react'\n// 'https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/GDP-data.json'\n\nexport interface ChartProps {\n    data?: any\n}\n\nconst Chart: React.FC<ChartProps> = props => {\n    const d3Container = useRef(null)\n    const [gdpData, setGdpData] = React.useState<Array<any>>([])\n\n    useEffect(() => {\n        if (d3Container.current) {\n            d3.json(\n                'https://raw.githubusercontent.com/FreeCodeCamp/ProjectReferenceData/master/GDP-data.json'\n            ).then((response: any) => {\n                setGdpData(response.data)\n            })\n        }\n    }, [props.data])\n\n    const dataset = gdpData\n    const w = 1000\n    const h = 800\n    const padding = 40\n    var datesMap = dataset.map(function(each) {\n        return new Date(each[0])\n    })\n    var maxDate = new Date(d3.max(datesMap) as any)\n    maxDate.setMonth(maxDate.getMonth() + 3)\n    const minDate = d3.min(dataset, d => d[0])\n\n    const xScale = d3\n        .scaleTime()\n        .domain([new Date(minDate), maxDate])\n        .range([padding, w - padding])\n    const yScale = d3\n        .scaleLinear()\n        .domain([0, d3.max(dataset, d => d[1])])\n        .range([h - padding, padding])\n    const svg = d3\n        .select('#container')\n        .append('svg')\n        .attr('width', w)\n        .attr('height', h)\n    const xAxis = d3\n        .axisBottom(xScale)\n        .tickFormat(d3.timeFormat('%Y') as any)\n        .ticks(15)\n    const yAxis = d3.axisLeft(yScale)\n    let tooltip = d3\n        .select('#container')\n        .append('div')\n        .attr('class', 'tooltip')\n        .attr('id', 'tooltip')\n        .style('opacity', 0)\n\n    svg.selectAll('rect')\n        .data(dataset)\n        .enter()\n        .append('rect')\n        .attr('x', (d, i) => {\n            return padding + (i * (w - 2 * padding)) / dataset.length\n        })\n        .attr('y', (d, i) => {\n            return yScale(d[1])\n        })\n        .attr('class', 'bar')\n        .attr('width', 4)\n        .attr('height', (d, i) => {\n            return h - padding - yScale(d[1])\n        })\n        .attr('data-date', function(d, i) {\n            return d[0]\n        })\n        .attr('data-gdp', function(d) {\n            return d[1]\n        })\n        .on('mouseover', function(d) {\n            tooltip\n                .transition()\n                .duration(200)\n                .style('opacity', 1)\n            tooltip\n                .html(`${d[0]}${(<br />)}$ ${d[1]}`)\n                .style('left', d3.event.pageX - 100 + 'px')\n                .style('top', d3.event.pageY - 80 + 'px')\n                .style('display', 'inline-block')\n            tooltip.attr('data-date', d[0])\n        })\n        .on('mouseout', function(d) {\n            tooltip\n                .transition()\n                .duration(400)\n                .style('opacity', 0)\n        })\n\n    svg.append('g')\n        .attr('id', 'x-axis')\n        .attr('transform', `translate(0, ${h - padding})`)\n        .call(xAxis)\n    svg.append('g')\n        .attr('transform', 'translate(' + padding + ', 0)')\n        .attr('id', 'y-axis')\n        .call(yAxis)\n    svg.append('text')\n        .attr('id', 'title')\n        .attr('class', 'chart-title')\n        .attr('x', 300)\n        .attr('y', 50)\n        .text('US GDP')\n\n    return <div id=\"container\" ref={d3Container}></div>\n}\n\nexport default Chart\n","import React from 'react'\nimport './App.scss'\nimport Chart from './containers/chart'\n\nconst App: React.FC = () => {\n    return <Chart />\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}